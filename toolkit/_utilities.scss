/// Fonts and Text
/// ==============================

/// font-smoothing
/// @parameter $value: Accepted values: [ON | off]

@mixin font-smoothing($value: on) {
  @if $value == on {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
  }

  @else {
    -moz-osx-font-smoothing: auto;
    -webkit-font-smoothing: subpixel-antialiased;
  }
}

/// em
/// Convert px value to em equivalent
/// @parameter {Number} $value: Input px value
/// @parameter {Number} $px-reference: Reference px size (font-size of self/parent)
/// @return {Number}

@function em($value, $px-reference: $base-font-size) {
  @return ($value / $px-reference) * 1em;
}

/// rem
/// @parameter {Number} $px-value
/// @return {Number}

@function rem($px-value) {
  @return $px-value / ($base-font-size / (1rem * 1));
}

/// @see https://github.com/bitmanic/rem
/// @parameter {Property} $property
/// @parameter {Number} $px-values
/// @return {Number}

@mixin rem($property, $px-values) {
  // Print the first line in pixel values
  #{$property}: $px-values;

  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == 'number' {
    #{$property}: rem($px-values);
  }

  @else {
    // Create an empty list that we can dump values into
    $rem-values: ();

    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of($value) != 'number' {
        $rem-values: append($rem-values, $value);
      }

      @else {
        $rem-values: append($rem-values, rem($value));
      }
    }

    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}

/// font-face
/// @parameter {String} $font-family: Name of the font
/// @parameter {Path} $file-path: Path to font (filename without extension)
/// @parameter {Number} $weight: Weight of font (default: normal)
/// @parameter {String} $style: Style of font (default: normal)
/// @example @include font-face('Font Name', '/path/to/font', 400, normal);
/// @see https://github.com/thoughtbot/bourbon/blob/3dca2ecccaaa3db9cea8d74c8221fbde7e6284d8/app/assets/stylesheets/css3/_font-face.scss

@mixin font-face($font-family, $file-path, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    src: url('#{$file-path}.woff2') format('woff2'),
         url('#{$file-path}.woff') format('woff'),
         url('#{$file-path}.otf') format('opentype'),
         url('#{$file-path}.ttf') format('truetype');
  }
}

/// placeholder
/// @parameter {Content} @content: Add styles for placeholders

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
    opacity: 1;
  }

  &::-moz-placeholder {
    @content;
    opacity: 1;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

/// selection
/// @parameter {Content} @content: Add styles for highlighted text

@mixin selection {
  ::-webkit-selection {
    @content;
  }

  ::-moz-selection {
    @content;
  }

  ::selection {
    @content;
  }
}

/// header-style
/// @parameter {Content} @content: Add styles for header texts

@mixin header-style {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  th {
    @content;
  }
}

/// paragraph-style
/// @parameter {Content} @content: Add styles for paragraph texts

@mixin paragraph-style {
  p,
  li,
  td {
    @content;
  }
}

/// line-clamp
/// cut text off after a certain number of lines, ending in ellipsis
/// @parameter {Nunber} $lines: maximum number of lines
/// @see https://dropshado.ws/post/1015351370/webkit-line-clamp

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  word-break: break-word;
}

/// Layout
/// ==============================

/// sets an element size, especially useful for creating squares and circles
/// @parameter {Number} $width: the value used for both width and height if height is not set
/// @parameter {Number} $height

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// clearfix
@mixin clearfix {
  &::before,
  &::after {
    display: block;
    content: ' ';
  }

  &::after {
    clear: both;
  }
}

// force an emlement within a `.container` div to be full width
@mixin force-full-width() {
  position: relative;
  width: calc(100vw);
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
  overflow-x: hidden;
}

/// Create multiple columns from a group of items
/// @parameter {Number} $column-count
/// @parameter {Number} $column-gap

@mixin columns($column-count: 2, $column-gap: 40px) {
  column-count: $column-count;
  column-gap: $column-gap;
}

/// absolutly center an element either vertically, horizontally, bor both
/// @parameter {String} $position: [vertical | horizontal | both]

@mixin center($position) {
  position: absolute;

  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }

  @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  }

  @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

/// setup pseudo elements with the values they need to exist
/// for use with ::before / ::after elements, as you always use these
/// @parameter {String} $content:
/// @parameter {Value} $pos: Accepted values: [ABSOLUTE | relative | static | sticky | fixed]
/// @parameter {Value} $display:

@mixin pseudo($content: '', $pos: absolute, $display: block) {
  position: $pos;
  display: $display;
  content: $content;
}

/// Device targetting
/// ==============================

/// retina
/// @parameter {Content} @content: Add the styles you wish to apply to retina

@mixin retina {
  @media
  (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    @content;
  }
}

/// background-image-retina
/// @parameter {Path} $file: Location of @2x file
/// @parameter {Extension} $type: Extension of @2x file
/// @parameter {Number} $width: Width of @2x image (in @1x dimensions)
/// @parameter {Number} $height: Height of @2x image (in @1x dimensions)

@mixin background-image-retina($file, $type, $width: auto, $height: auto) {
  background-image: url($file + '.' + $type);

  @include retina {
    & {
      background-image: url($file + '@2x.' + $type);
      -webkit-background-size: $width $height;
      background-size: $width $height;
    }
  }
}

/// chromeonly
/// @parameter {Content} @content: Add the styles you wish to apply to chrome

@mixin chromeonly {
  @media all and (-webkit-min-device-pixel-ratio:0) and (min-resolution: .001dpcm) {
    @content;
  }
}

/// Generate vendor prefixes
/// @parameter {String} $property
/// @parameter {Value} $value
/// @parameter {String()} $prefixes
/// @example @include value-prefixer(cursor, grab, ("webkit", "moz"));

@mixin prefixer($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{"-" + $prefix + "-" + $property}: $value;
  }
  #{$property}: $value;
}

/// visually-hidden
/// @parameter {String} $toggle: [hide | unhide]
/// @see http://a11yproject.com/posts/how-to-hide-content/

@mixin reader-hide($toggle: 'hide') {
  &:not(:focus):not(:active) {
    @if $toggle == 'hide' {
      position: absolute !important;
      height: 1px;
      width: 1px;
      overflow: hidden;
      clip: rect(1px, 1px, 1px, 1px);
      white-space: nowrap;
    } @else if $toggle == 'unhide' {
      position: static;
      height: unset;
      width: unset;
      overflow: visible;
      clip: auto;
      white-space: unset;
    }
  }
}

/// Screen sizes
/// ==============================
@mixin screen-min($min-width) {
  @media screen
  and (min-width: $min-width) {
    @content;
  }
}

@mixin screen-max($max-width) {
  @media screen
  and (max-width: $max-width - 1) {
    @content;
  }
}

@mixin screen-range($min-width, $max-width) {
  @media screen
  and (min-width: $min-width)
  and (max-width: $max-width - 1) {
    @content;
  }
}

@mixin device-range($min-width, $max-width) {
  @media screen
  and (min-device-width: $min-width)
  and (max-device-width: $min-width) {
    @content;
  }
}

/// breakpoint (for mobile first)
/// @parameter {String} $type (@see _variables)
/// @parameter {Content} @content
@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    @if $min == 'xxs' {
      @include screen-min($screen-xxs) {
        @content;
      }
    }
    @else if $min == 'xs' {
      @include screen-min($screen-xs) {
        @content;
      }
    }
    @else if $min == 'sm' {
      @include screen-min($screen-sm) {
        @content;
      }
    }
    @else if $min == 'md' {
      @include screen-min($screen-md) {
        @content;
      }
    }
    @else if $min == 'lg' {
      @include screen-min($screen-lg) {
        @content;
      }
    }
    @else if $min == 'xlg' {
      @include screen-min($screen-xlg) {
        @content;
      }
    }
    @else if $min == 'print' {
      @media print {
        @content;
      }
    }
  }

  @else if $type == number {
    @include screen-range($min, $max) {
      @content;
    }
  }
}

/// Colors
/// ==============================

/// palette
/// @parameter {String} $palette: Primary palette color as declared in _colors
/// @parameter {String} $tone: Modifier of primary color, base by default
/// @see https://twitter.com/thecodezombie/status/595977653296996354/photo/1

@function palette($palette, $tone: 'base') {
  @return map-get(map-get($palettes, $palette), $tone);
}

/// rgba-convert
/// @parameter {Color} $hexcolor: Hex color you want to be converted to a rgba value
/// @parameter {Number} $opacity: Value of alpha / opacity
/// @return {RGBAColor}
/// @see https://alwaystwisted.com/articles/2013-05-06-smarter-rgba-fallbacks-with-sass

@function rgba-convert($hexcolor, $opacity) {
  @return rgba($hexcolor, $opacity);
}

/// Lighten a color by mixing it with white.
/// @parameter {Color} $color - Color to lighten
/// @parameter {Number} $percentage - Amount of white color to mix in
/// @return {Color}

@function tint($color, $percentage) {
  @return mix(#fff, $color, $percentage);
}

/// Darken a color by mixing it with black.
/// @parameter {Color} $color - Color to darken
/// @parameter {Number} $percentage - Amount of black color to mix in
/// @return {Color}

@function shade($color, $percentage) {
  @return mix(#000, $color, $percentage);
}

/// Change your colors depending on browser dark-mode preference with fallback to "light mode"
/// @parameter {Property} $property: The CSS property to give different values to if browser pref. is light / dark
/// @parameter {Color} $lightcolor: Value (color) to have if browser is light (fallback)
/// @parameter {Color} $darkcolor: Value (color) to have if browser is dark
/// @return {Propery}: {Color}

@mixin color-schemes($property, $lightcolor, $darkcolor) {
  #{$property}: $lightcolor;

  @media (prefers-color-scheme: dark) {
    #{$property}: $darkcolor;
  }

  @media (prefers-color-scheme: light) {
    #{$property}: $lightcolor;
  }
}

/// Pick the best text color for the background
/// @parameter {Color} $base-color: The color you want a conflicting color for
/// @parameter {Color} $light-color: default white
/// @parameter {Color} $dark-color: default black

@function text-contrast($base-color, $light-color: #FFFFFF, $dark-color: #000000) {
  $color-brightness: round((red($base-color) * 299) + (green($base-color) * 587) + (blue($base-color) * 114) / 1000);
  $light: round((red(#FFFFFF) * 299) + (green(#FFFFFF) * 587) + (blue(#FFFFFF) * 114) / 1000);

  @if abs($color-brightness) < ($light/2){
    @return $light-color;
  }

  @else {
    @return $dark-color;
  }
}

/// Other
/// ==============================

/// Strip the unit from a number
/// @parameter {Number} $number: Number value with px/em/% etc, to be stripped
/// @return {Number}

@function strip-unit($number) {
	@return $number / ($number * 0 + 1);
}

/// hardware-acceleration
/// @parameter {Boolean} $value: Accepted values: [ON | off]

@mixin hardware-acceleration($value: on) {
  @if $value == true {
    transform: translate3d(0, 0, 0);
    backface-visibility: hidden;
    perspective: 1000;
  }

  @else {
    transform: none;
    backface-visibility: visible;
    perspective: none;
  }
}

/// Allow a user to interact with an element
/// @parameter {Boolean} $value: Accepted values: [ON | off]

@mixin interaction($value: off) {
  @if $value == off {
    cursor: default;
    user-select: none;
    pointer-events: none;
  }

  @else {
    cursor: auto;
    user-select: all;
    pointer-events: all;
  }
}

/// Styling
/// ==============================

/// hr-color
/// @parameter {Color} $color

@mixin hr-color($color) {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid $color;
  margin: 1em 0;
  padding: 0;
}

/// simple ease in out transition with one line
/// @parameter {String()} $properties: what css property to transition
/// @parameter {Number} $duration: how long the transition will last (see _variables)
/// @parameter {Value} $timing: what transition effect to use
/// @parameter {Number} $delay: how long to delay the transition for
/// @return transition: all ease-in-out .15s 0s;

@mixin transition($properties: ('all'), $duration: $transition-time, $timing: ease-in-out, $delay: 0s) {
  $value: ();
  @each $property in $properties {
    @if length($value) > 0 {
      $value: append($value, unquote(",") #{$property} $transition-time $timing $delay);
    }

    @else {
      $value: append($value, #{$property} $transition-time $timing $delay);
    }
  }

  transition: $value;
}
